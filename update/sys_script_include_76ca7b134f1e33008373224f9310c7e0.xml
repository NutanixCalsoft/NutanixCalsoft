<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_nuta2_nutanix_ca.Nutanix_Action_Utils</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>Nutanix_Action_Utils</name>
        <script><![CDATA[var Nutanix_Action_Utils = Class.create();
Nutanix_Action_Utils.prototype = {
    initialize: function() {
		this.utils = new Nutanix_Calm_Utils();
		this.logger = new Nutanix_Calm_Logger();
		this.actBody = {"api_version":"","metadata":"","spec":{"target_uuid":"","target_kind":"Application","args":[]}};
    },
	
	_common_action_body: function(app_resp) {
		this.actBody.api_version = app_resp.api_version;
		delete app_resp.metadata.owner_reference;
		this.actBody.metadata = app_resp.metadata;
	},
	
	app_clone_body: function(app_resp, action_variables) {
		action_variables = JSON.parse(action_variables);
		this._common_action_body(app_resp);
		this.actBody.spec = action_variables;
		return JSON.stringify(this.actBody);
	},
	
	snapshot_crd_body: function(app_resp, action_variables) {
		
		action_variables = JSON.parse(action_variables);
		this._common_action_body(app_resp);
		var substrate_uuid = app_resp.status.resources.deployment_list[0].substrate_configuration.element_list[0].uuid + '';
		this.actBody.spec.target_uuid = app_resp.metadata.uuid;
		
		for(var i in action_variables)
			this.actBody.spec.args[i] = action_variables[i];
		var snapshot_crd_json = {"substratUUID":substrate_uuid, "actionBody":this.actBody};
		
		return snapshot_crd_json;
	},
	
	default_actbody: function(app_resp, action_variables) {
		
		if(action_variables != '')
			action_variables = JSON.parse(action_variables);
		
		this._common_action_body(app_resp);
		this.actBody.spec.target_uuid = app_resp.metadata.uuid;
		
		for(var i in action_variables)
			this.actBody.spec.args[i] = action_variables[i];
		var default_json = this.actBody;
		
		return JSON.stringify(default_json);
	},
	
	app_update_blueprint_call: function(action_sys_id) {
		
		try {
			var appGr = new GlideRecord(this.utils.configuration.table.NutanixCalmAction);
			appGr.get(action_sys_id);
			var app_uuid = appGr.parent_uuid + '';
		
			var getAppBlueprint = this.utils.makeCalmApiCall('GET', '/apps/'+app_uuid+'/blueprints/original','');
			if(getAppBlueprint.getStatusCode() == '200' || getAppBlueprint.getStatusCode() == '201')
				return getAppBlueprint.getBody();
			else
				this.logger.error("Error in app_update_blueprint_call API call. Error: " +getAppBlueprint.getBody());
		} catch(e) {
			this.logger.error("Error while fetching app blueprint[original] API call. Error: " +e);
		}
			
	},
	
	app_blueprint_validate_call: function(action_sys_id, updated_bp) {
		
		try {
			var appGr = new GlideRecord(this.utils.configuration.table.NutanixCalmAction);
			appGr.get(action_sys_id);
			var app_uuid = appGr.parent_uuid + '';
			
			var getAppBlueprint = this.utils.makeCalmApiCall('POST', '/apps/'+app_uuid+'/blueprints/new/validate', updated_bp);
			if(getAppBlueprint.getStatusCode() == '200' || getAppBlueprint.getStatusCode() == '201')
				return getAppBlueprint.getBody();
			else
				this.logger.error("Error in app_blueprint_validate_call API call. Error: " +getAppBlueprint.getBody());
		} catch(e) {
			this.logger.error("Error while validating app blueprint[new]. Error: " +e);
		}
			
	},
	
	update_app_blueprint: function(action_sys_id, updated_bp) {
		try {
			var appGr = new GlideRecord(this.utils.configuration.table.NutanixCalmAction);
			appGr.get(action_sys_id);
			var app_uuid = appGr.parent_uuid + '';
		
			var getAppBlueprint = this.utils.makeCalmApiCall('PUT', '/apps/'+app_uuid+'/blueprints/new', updated_bp);
			
			if(getAppBlueprint.getStatusCode() == '200' || getAppBlueprint.getStatusCode() == '201')
				return getAppBlueprint.getBody();
			else
				this.logger.error("Error in app_update_blueprint_call API call. Error: " +getAppBlueprint.getBody());
		} catch(e) {
			this.logger.error("Error while updating app blueprint[new]. Error: " +e);
		}
	},
	
	update_actBody: function(app_resp) {
		
		this._common_action_body(app_resp);
		this.actBody.spec.target_uuid = app_resp.metadata.uuid;
		
		delete this.actBody.spec.args;
		var default_json = this.actBody;
		
		return JSON.stringify(default_json);
	},
	
	get_os_type_singleVM: function(action_sys_id) {
		var appGr = new GlideRecord(this.utils.configuration.table.NutanixCalmAction);
		appGr.get(action_sys_id);
		var app_uuid = appGr.parent_uuid + '';
		var os_type = '';
			
		var getAppBlueprint = this.utils.makeCalmApiCall('GET', '/apps/'+app_uuid, '');
			
		if(getAppBlueprint.getStatusCode() == '200' || getAppBlueprint.getStatusCode() == '201')
			 os_type = JSON.parse(getAppBlueprint.getBody()).status.resources.deployment_list[0].substrate_configuration.os_type + '';
		
		return os_type;
	},
	
	get_provider_type_singleVM: function(action_sys_id, sys_id_type) {
		
		var app_uuid = "";
		
		if(sys_id_type == "actions") {
			var appGr = new GlideRecord(this.utils.configuration.table.NutanixCalmAction);
			appGr.get(action_sys_id);
			app_uuid = appGr.parent_uuid + '';
		}
		
		if(sys_id_type == "restore_points") {
			var restoreGr = new GlideRecord(this.utils.configuration.table.recoveryPoints);
			restoreGr.get(action_sys_id);
			app_uuid = restoreGr.parent_uuid+'';
		}
		
		var getAppBlueprint = this.utils.makeCalmApiCall('GET', '/apps/'+app_uuid, '');
		var provider_type = '';
		
		if(getAppBlueprint.getStatusCode() == '200' || getAppBlueprint.getStatusCode() == '201')
			provider_type = JSON.parse(getAppBlueprint.getBody()).status.resources.deployment_list[0].substrate_configuration.type + '';
		gs.info(provider_type);
		return provider_type + '';
	},
	
    type: 'Nutanix_Action_Utils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-03 07:55:10</sys_created_on>
        <sys_id>76ca7b134f1e33008373224f9310c7e0</sys_id>
        <sys_mod_count>71</sys_mod_count>
        <sys_name>Nutanix_Action_Utils</sys_name>
        <sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>sys_script_include_76ca7b134f1e33008373224f9310c7e0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-12-19 14:43:39</sys_updated_on>
    </sys_script_include>
</record_update>
