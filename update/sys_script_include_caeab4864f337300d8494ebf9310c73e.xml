<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>false</active>
        <api_name>x_nuta2_nutanix_ca.Migration_Script</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>Migration_Script</name>
        <script><![CDATA[var Migration_Script = Class.create();
Migration_Script.prototype = {
	initialize: function() {
		this.appUtil = new Nutanix_Calm_Utils();
		this.logger = new Nutanix_Calm_Logger();
		this.createVariable = new Nutanix_CreateCatalogVariables();
		this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
	},
	
	isMigrationNeeded: function(){
		
		var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
		cat_items.query();
		if(cat_items.hasNext()){
			return true;
		}
		var subnetGr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
		subnetGr.addEncodedQuery('cluster_name=NULL^cluster_uuid=NULL');
		subnetGr.query();
		if(subnetGr.hasNext()){
			return true;
		}
		var vm= new GlideAggregate('x_nuta2_nutanix_ca_vmware');
		vm.groupBy('uuid');
		vm.addAggregate('COUNT');
		vm.query();
		while(vm.next()){
			if(vm.getAggregate('COUNT')>1){
				return true;
			}
		}
		return false;
		
	},

	updateCatalog: function(){

		this.logger.info("Migration Started");

		gs.setProperty('x_nuta2_nutanix_ca.migration.script.ran', 'true');

		var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
		gr.query();
		while( gr.next() ) {
			try{
				this.dataValidation( gr.item_name, gr.project, gr.blueprint, gr.application_profile );
				this.clientScript( gr.item_name, gr.project, gr.blueprint, gr.application_profile );	
				this.logger.info(gr.item_name.name + " Catalog Item succesfully migrated.");
			}catch(e){
				this.logger.error(gr.item_name.name + " Catalog Item was not migrated due to issue in some field type and the value it contained.");
			}
		}

		var subnetGr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
		subnetGr.addEncodedQuery('cluster_name=NULL^cluster_uuid=NULL');
		subnetGr.deleteMultiple();
		
		var unique_vm = {};
		var  vm = new GlideRecord('x_nuta2_nutanix_ca_vmware');
		vm.query();
		while(vm.next()){
			if(  unique_vm[vm.uuid] &&  unique_vm[vm.uuid] == true)
				vm.deleteRecord();
			unique_vm[vm.uuid+''] = true;
		}
		
		this.logger.info("Migration Completed");
	},

	dataValidation: function( catSysId, project, blueprint, profile ){

		var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
		gr.addEncodedQuery('catalog_item='+blueprint+'^application_profile='+profile);
		gr.query();

		var varJSON = {};

		while( gr.next() ) {
			varJSON[gr.variable.name+''] = {};
			varJSON[gr.variable.name+''] = {
				'data_type': gr.data_type+'',
				'field_regex': gr.field_regex+'',
				'value_type': gr.value_type+'',
				'type': gr.variable.type+''
			};
		}
		var oldGR = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
		oldGR.addEncodedQuery('catalog_item='+catSysId+'^application_profile='+profile);
		oldGR.query();

		while( oldGR.next() ) {
			var varName = oldGR.variable.name+'';
			if( varJSON[varName] ){
				oldGR.data_type = varJSON[varName].data_type+'';
				oldGR.field_regex = varJSON[varName].field_regex+'';
				oldGR.value_type = varJSON[varName].value_type+'';
				oldGR.type = varJSON[varName].type+'';

				if(oldGR.data_type == 'LOCAL' && (oldGR.value_type+'' == 'DATE_TIME' || oldGR.value_type+'' == 'DATE'))
					oldGR.default_value = this.appScriptInstance._formttedDateTime(oldGR.default_value+'',  oldGR.value_type+'', true);

				oldGR.update();
			}
		}

		/*Update item_option_new */
		var gr = new GlideRecord('item_option_new');
		gr.addEncodedQuery('cat_item='+blueprint);
		gr.query();

		var varJSON = {};

		while( gr.next() ) {
			varJSON[gr.name+''] = {};
			varJSON[gr.name+''] = {
				'type': gr.type+'',
				'show_help': gr.show_help+'',
				'help_text': gr.help_text+'',
				'list_table': gr.list_table+'',
				'reference_qual': gr.reference_qual+'',
				'attributes': gr.attributes+'',
				'sys_id': gr.sys_id+'',
				'order': gr.order,
				'mandatory': gr.mandatory+''
			};
		}
		var oldGR = new GlideRecord('item_option_new');
		oldGR.addEncodedQuery('cat_item='+catSysId);
		oldGR.query();

		while( oldGR.next() ) {
			var varName = oldGR.name+'';
			var newSysId = '';
			if( varJSON[varName] ){
				oldGR.type = varJSON[varName].type+'';
				oldGR.show_help = varJSON[varName].show_help+'';
				oldGR.help_text = varJSON[varName].help_text+'';
				oldGR.list_table = varJSON[varName].list_table+'';
				oldGR.reference_qual = varJSON[varName].reference_qual+'';
				oldGR.attributes = varJSON[varName].attributes+'';
				//oldGR.order = varJSON[varName].order+'';
				oldGR.mandatory = varJSON[varName].mandatory+'';

				oldGR.update();

				if(oldGR.type+'' == 5){
					var glideRec = new GlideRecord('question_choice');
					glideRec.addQuery('question', varJSON[varName].sys_id+'');
					glideRec.query();
					while(glideRec.next()){
						glideRec.question = oldGR.sys_id+'';
						glideRec.insert();
					}
				}
			}

		}
		/*End Update item_option_new */

	},
	clientScript: function( catSysId, project, blueprint, profile ){

		var catalogScriptGR = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
		catalogScriptGR.addQuery('cat_item', catSysId );
		catalogScriptGR.query();

		while(catalogScriptGR.next()){

			if(catalogScriptGR.name+'' == "Fetch form data on change of profile") {

				catalogScriptGR.order=100;
				catalogScriptGR.script = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;} var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialogbox = new GlideModal('order_loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'true');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('order_loader').destroy();}}";
				catalogScriptGR.update();

			}else if(catalogScriptGR.name+'' == "Check AppName OnChange" ){

				catalogScriptGR.order=100;
				catalogScriptGR.script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var name = newValue; if (!(/^[_-\\w ]+$/.test(name) && (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); } }";
				catalogScriptGR.update();

			}else if(catalogScriptGR.name+'' == "Get Credentials OnLoad" ){

				catalogScriptGR.order=200;
				catalogScriptGR.script = "function onLoad() { var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\";var loadingDialog = new GlideModal('credentials_loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer);for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_');g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) {g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false');}g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference && credential.credential_reference.name) {g_form.setDisplay(name + '_credential_reference', 'true');g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + '');g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly);g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly);g_form.setDisplay(name + '_ssh_private_key', 'false');g_form.setDisplay(name + '_passphrase', 'false');g_form.setDisplay(name + '_password', 'false');g_form.setDisplay(name + '_secret_type', 'false');}} sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('credentials_loader').destroy();}}";
				catalogScriptGR.update();

			}else if(catalogScriptGR.name+'' == "Get Project and Profile List onLoad" ){

				catalogScriptGR.order=100;
				catalogScriptGR.script =  "function onLoad() { var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('project_profile_loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i < projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile');g_form.setReadOnly('default_project', true); for (i = 0; i < profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } new GlideModal().get('project_profile_loader').destroy();}}";
				catalogScriptGR.update();

			}else if(catalogScriptGR.name+'' == "Check AppName OnSubmit" ){

				catalogScriptGR.order=100;
				catalogScriptGR.script = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) && (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i < keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j < n; j++) { var listVal = actualVal[splitted[j] + '']; if (dataType + '' == 'Dynamic' && j == n - 1 && listVal.endsWith('\\n')) listVal = listVal.substr(0, listVal.length - 1); if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if (dataType + '' == 'Dynamic' && value.endsWith('\\n')) value = value.substr(0, value.length - 1); if (reg.test(value)) { row.status = true; } } if (value && row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\" ;var loadingDialog = new GlideModal('validating_field_loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('validating_field_loader').destroy(); return false; }}";
				catalogScriptGR.update();

			}
		}

		/*Insert new Scripts*/
		var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
		onLoadclientScript.initialize();
		onLoadclientScript.name = "Check Catalog Item Validity";
		onLoadclientScript.type = "onLoad";
		onLoadclientScript.applies_to = "item";
		onLoadclientScript.cat_item = catSysId;
		onLoadclientScript.active = true;
		onLoadclientScript.order = 1;
		//onLoadclientScript.sys_policy=protected;

		onLoadclientScript.description = 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.';

		onLoadclientScript.applies_catalog = true;
		onLoadclientScript.ui_type = "0";
		onLoadclientScript.applies_req_item = false;
		onLoadclientScript.applies_sc_task = false;
		onLoadclientScript.script = "function onLoad() { var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('blueprint_loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var projectUUID = getParameterValue('projectUUID') + ''; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('blueprint_loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } 				 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; 				 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
		onLoadclientScript.insert();


		/* Fetching Dynamic values for advance variable*/

		var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
		onLoadclientScript.initialize();
		onLoadclientScript.name = "Fetch dynamic value for advance variables onload";
		onLoadclientScript.type = "onLoad";
		onLoadclientScript.applies_to = "item";
		onLoadclientScript.cat_item = catSysId;
		onLoadclientScript.active = true;
		onLoadclientScript.order=10;
		//onLoadclientScript.sys_policy=protected;

		onLoadclientScript.description = 'This script is created for fetching dynamic values for advance variables onload.';

		onLoadclientScript.applies_catalog = true;
		onLoadclientScript.ui_type = "0";
		onLoadclientScript.applies_req_item = false;
		onLoadclientScript.applies_sc_task = false;
		onLoadclientScript.script = " function onLoad() { var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('variables_values_loader', true);  loadingDialog.setTitle('Fetching Dynamic values for advance variables...'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i < keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k < (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); }} else { g_form.addErrorMessage('Error in variable: ' + keys[i] + ': ' + row.options.values[0]); }} new GlideModal().get('variables_values_loader').destroy();}}";
		onLoadclientScript.insert();

		this.logger.debug("Created onLoad script to fetch dynamic values for advance variable on catalog item "+catSysId);
		/* Fetching Dynamic values for advance variable*/

		/*Onload script for subnet*/

		var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
		onLoadclientScript.initialize();
		onLoadclientScript.name = "Get Subnet Info";
		onLoadclientScript.type = "onLoad";
		onLoadclientScript.applies_to = "item";
		onLoadclientScript.cat_item = catSysId;
		onLoadclientScript.active = true;
		onLoadclientScript.order=50;

		onLoadclientScript.description = 'This script is created for getting subnet list.';

		onLoadclientScript.applies_catalog = true;
		onLoadclientScript.ui_type = "0";
		onLoadclientScript.applies_req_item = false;
		onLoadclientScript.applies_sc_task = false;
		onLoadclientScript.script = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList) g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);}}else{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x < n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s < nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){ g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
		onLoadclientScript.insert();

		/*End of Onload script for subnet*/

		/*End Insert new Scripts*/


		/*NIC client script*/
		var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
		gr.addEncodedQuery('application_profile='+profile+'^catalog_item='+blueprint);
		gr.query();

		if(gr.next() && gr.providers+'' == 'AHV'){

			var oldGR = new GlideRecord('item_option_new');
			oldGR.addEncodedQuery('cat_item='+catSysId);
			oldGR.query();

			var x = new RegExp('^.*([\\d])+_nic_([\\d])+.*$');

			while( oldGR.next() ){

				if(x.test(oldGR.name+'')){

					if((oldGR.name+'').indexOf('_nic_1') != -1){
						if(oldGR.default_value+''){

							var clusterName = '';

							var grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet+'');
							grSubnet.addQuery('uuid',oldGR.default_value+'');
							grSubnet.query();
							if(grSubnet.next())
								clusterName = grSubnet.cluster_name ; 
							var serviceName = (oldGR.name+'').split('_0_nic_1')[0];
							this.createVariable._createOnlyField('cluster_name' ,  clusterName , catSysId, oldGR.order-1 , serviceName, 6);

						}
					}


					var catalogScriptGR = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
					catalogScriptGR.initialize();
					catalogScriptGR.name = "Populate Nic on change of Nic Sys_id : "+oldGR.sys_id;
					catalogScriptGR.type = "onChange";
					catalogScriptGR.applies_to = "item";
					catalogScriptGR.cat_item = catSysId;				
					catalogScriptGR.cat_variable="IO:"+oldGR.sys_id+'';				
					catalogScriptGR.active = true;

					catalogScriptGR.order=400;

					catalogScriptGR.description = 'This script is created for onChange of Nic';

					catalogScriptGR.applies_catalog = true;
					catalogScriptGR.ui_type = "0";
					catalogScriptGR.applies_req_item = false;
					catalogScriptGR.applies_sc_task = false;
					catalogScriptGR.script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var clusterJson = JSON.parse(sessionStorage.getItem( 'clusterName_'+g_form.getUniqueValue() )); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal;for (var i in clusterInfo) {for (var k in clusterInfo[i].subnet) {if (k == newValue) {clusterVal = i + ''; }}}var clustername, relatedNic;for (var i in catCluster) {var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('"+oldGR.sys_id+''+"' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic);}}}} function addNicOptions(relatedNic) {for (var n in relatedNic) {for (var l in clusterInfo) {if (l != clusterVal && clusterVal) for (var j in clusterInfo[l].subnet) { g_form.removeOption(relatedNic[n], j); }}}}}";
					catalogScriptGR.insert();
					this.logger.debug("Created onChange script to populate Nic SYS id  "+catalogScriptGR.cat_variable);

					oldGR.lookup_label = 'name,cluster_name';
					oldGR.update();
				} 
			}
		}
		/*END NIC client script*/


	},

	type: 'Migration_Script'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-09-11 10:09:24</sys_created_on>
        <sys_id>caeab4864f337300d8494ebf9310c73e</sys_id>
        <sys_mod_count>35</sys_mod_count>
        <sys_name>Migration_Script</sys_name>
        <sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>sys_script_include_caeab4864f337300d8494ebf9310c73e</sys_update_name>
        <sys_updated_by>shivraj</sys_updated_by>
        <sys_updated_on>2020-03-30 07:17:24</sys_updated_on>
    </sys_script_include>
</record_update>
